  // async createTransaction(data: ICreateTransactionProps): Promise<Partial<ITransaccionCreate>> {
  //   const { venta, user } = data;
  //   // venta.tipoTransaccion = "VENTA";
  //   try {
  //     let listInventarioSucursalIds = venta.products?.map((detalle) =>detalle.inventarioSucursalId) as string[];

  //     let dataInit:IInit = {
  //       userId: user._id,
  //       branchId: venta.sucursalId!,
  //       listInventarioSucursalId: listInventarioSucursalIds
  //     }

  //     await this.inventoryManagementService.init(dataInit);

  //     let sucursalId = new mongoose.Types.ObjectId(venta.sucursalId!);
  //     let usuarioId = new mongoose.Types.ObjectId(venta.userId!);
  //     let cajaId = new mongoose.Types.ObjectId(venta.cajaId!);

  //     let listInventarioSucursal:IInventarioSucursal[] = []

  //     let newVenta = {
  //       usuarioId: usuarioId,
  //       sucursalId: sucursalId,
  //       subtotal: new mongoose.Types.Decimal128(venta.subtotal?.toString()!),
  //       total: new mongoose.Types.Decimal128(venta.total?.toString()!),
  //       descuento: new mongoose.Types.Decimal128(venta.discount?.toString()! || "0"),
  //       deleted_at: null,
  //       fechaRegistro: getDateInManaguaTimezone(),
  //       tipoTransaccion: data.venta.tipoTransaccion,
  //       paymentMethod: venta.paymentMethod,
  //       entidadId : new mongoose.Types.ObjectId(venta.entidadId!),
  //       estadoTrasaccion: (venta.paymentMethod === 'credit' ? 'PENDIENTE' : 'PAGADA') as TypeEstatusTransaction,
  //       cajaId: cajaId
  //     }

  //     const newSale = await this.repository.create(newVenta);

  //     for await (const element of venta.products!) {

  //       let subtotal = element.price * element.quantity;
  //       let descuentoMonto = element.discount?.amount! || 0;
  //       let total = subtotal - descuentoMonto;
  //       let productoId = new mongoose.Types.ObjectId(element.productId);
  //       let tipoAplicacion:ITipoDescuentoEntidad = element.discount?.type === "grupo" ? 'Group' : 'Product';

  //       let detalleVenta = {
  //         ventaId: (newSale._id as mongoose.Types.ObjectId),
  //         productoId: productoId,
  //         precio: new mongoose.Types.Decimal128(element.price?.toString()!),
  //         cantidad: element.quantity,
  //         subtotal: new mongoose.Types.Decimal128(subtotal.toString()),
  //         total: new mongoose.Types.Decimal128(total.toString()),
  //         descuento: new mongoose.Types.Decimal128(descuentoMonto.toString()),
  //         deleted_at: null,
  //         tipoCliente: element.clientType,
  //         tipoDescuentoEntidad: tipoAplicacion,
  //       }

  //       let newdDetalleVenta = await this.repository.createDetalleVenta(detalleVenta);

  //       (newSale.transactionDetails as mongoose.Types.ObjectId[]).push(newdDetalleVenta._id as mongoose.Types.ObjectId);
        
  //       let descuentoElement = element.discount;

  //       if(descuentoElement) {
  //         let descuentosProductosId: mongoose.Types.ObjectId | undefined;
  //         let descuentoGrupoId: mongoose.Types.ObjectId | undefined;

  //         if (tipoAplicacion === 'Product') {
  //           descuentoGrupoId = undefined;

  //           let descuentoProducto = await this.descuentoRepository.getDescuentoProductoByDescuentoId(descuentoElement.id);

  //           if(descuentoProducto) {
  //             descuentosProductosId = (descuentoProducto._id as mongoose.Types.ObjectId);
  //           } else {
  //             descuentosProductosId = undefined;
  //           }
  //         } else if (tipoAplicacion === 'Group') {
  //           descuentosProductosId = undefined;

  //           let descuentoGrupo = await this.descuentoRepository.getDescuentoGrupoByDescuentoId(descuentoElement.id);

  //           if(descuentoGrupo) {
  //             descuentoGrupoId = (descuentoGrupo.descuentoId as mongoose.Types.ObjectId);
  //           } else {
  //             descuentoGrupoId = undefined;
  //           }
  //         }

  //         let valor = element.discount?.amount! / element.quantity;


  //         let ventaDescuentosAplicados = {
  //           detalleVentaId: (newdDetalleVenta._id as mongoose.Types.ObjectId),
  //           descuentosProductosId: descuentosProductosId,
  //           descuentoGrupoId: descuentoGrupoId,
  //           tipoAplicacion: tipoAplicacion,
  //           valor: new mongoose.Types.Decimal128(element.discount?.percentage.toString()!),
  //           tipo: ITipoDescuento.PORCENTAJE,
  //           monto: new mongoose.Types.Decimal128(descuentoMonto.toString()!),
  //         }
  
  //         await this.repository.createVentaDescuentosAplicados(ventaDescuentosAplicados);
  //       }

  //       if (newSale.tipoTransaccion === 'VENTA') {

  //         let dataSubTractQuantity:ISubtractQuantity = {
  //           inventarioSucursalId: new mongoose.mongo.ObjectId(element.inventarioSucursalId),
  //           quantity: element.quantity,
            
  //           isNoSave:true,
  //           tipoMovimiento: data.venta.tipoTransaccion === 'VENTA' ? TipoMovimientoInventario.VENTA : TipoMovimientoInventario.COMPRA
  //         }
          
  //        let inventarioSucursal = (await this.inventoryManagementService.subtractQuantity(dataSubTractQuantity) as IInventarioSucursal)
  
  //        if (inventarioSucursal.stock <= inventarioSucursal.puntoReCompra) {
  //           listInventarioSucursal.push(inventarioSucursal);
  //         }
          
  //       } else if (newSale.tipoTransaccion === 'COMPRA') {
  //         let dataAddQuantity:IAddQuantity = {
  //           quantity: element.quantity,
  //           inventarioSucursalId: new mongoose.mongo.ObjectId(element.inventarioSucursalId) ,
  //           isNoSave:true,
  //           tipoMovimiento: data.venta.tipoTransaccion === 'VENTA' ? TipoMovimientoInventario.VENTA : TipoMovimientoInventario.COMPRA,
  //           cost: element.costoUnitario
  //         };
  
  //         await this.inventoryManagementService.addQuantity(dataAddQuantity)
  //       }
  //     }
 
  //     await this.inventoryManagementService.updateAllBranchInventory();
  //     await this.inventoryManagementService.saveAllMovimientoInventario();

  //     let ventaActualizar = ({...data.venta, id: (newSale._id as Types.ObjectId), } as ITransactionCreateCaja);
  //     const datosActualizar = {
  //       data: ventaActualizar,   
  //     }

  //     await newSale.save();

  //     if (data.venta.paymentMethod === 'cash') {
  //       await this.cashRegisterService.actualizarMontoEsperadoByTrasaccion(datosActualizar!); 
  //     }

  //     await this.resumenRepository.addTransactionDailySummary(newSale);

  //     if (newSale.paymentMethod === 'credit') {
  //       let credito:Partial<ICredito> = {
  //         sucursalId: newSale.sucursalId,
  //         entidadId: newSale.entidadId as mongoose.Types.ObjectId,
  //         transaccionId: newSale._id as mongoose.Types.ObjectId,
  //         tipoCredito: newSale.tipoTransaccion as 'VENTA' | 'COMPRA',
  //         modalidadCredito: venta.credito?.modalidadCredito as ModalidadCredito,
  //         saldoCredito: new mongoose.Types.Decimal128(`${venta.total}`),
  //         plazoCredito: venta.credito?.plazoCredito as number,
  //         cuotaMensual: venta.credito?.cuotaMensual as mongoose.Types.Decimal128,
  //         pagoMinimoMensual: venta.credito?.pagoMinimoMensual as mongoose.Types.Decimal128,
  //         fechaVencimiento: getDateInManaguaTimezone()
  //       }

  //       await this.creditoService.createCredito(credito);
  //     }

  //     let productListReOrder = listInventarioSucursal
  //       .filter((item) => item.stock < item.puntoReCompra)
  //       .map((item) => ({
  //         name: (item.productoId as IProducto).nombre,
  //         currentQuantity: item.stock,
  //         reorderPoint: item.puntoReCompra,
  //       }));

  //     productListReOrder.length > 0 &&
  //       notifyTelergramReorderThreshold(
  //         user.username,
  //         (listInventarioSucursal[0].sucursalId as ISucursal).nombre,
  //         productListReOrder,
  //         user.chatId
  //       );
      
      
  //     venta.id = (newSale._id as mongoose.Types.ObjectId).toString();
  //     return venta;
  //   } catch (error) {
  //     console.log(error);

      
      

  //     throw new Error(error.message);
  //   }
  // }